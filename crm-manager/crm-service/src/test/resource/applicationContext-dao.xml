<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
    <context:annotation-config/>

    <!-- 配置 读取propertiedb.propertiesties -->
    <context:property-placeholder location="classpath:db.properties" />


    <!--###########################################数据源1 ############################-->

    <bean name="dataSource1" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="5"/>
        <property name="maxActive" value="20"/>
        <!-- <property name="maxIdle" value="20" /> -->
        <property name="minIdle" value="3"/>
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>

    </bean>

    <!-- myBatis文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource1"/>
        <!-- 设置MyBatis核心配置文件 -->
        <property name="configLocation" value="classpath:SqlMapConfig.xml" />
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yyyu.crm.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 配置事务管理器 gx -->
    <bean id="transactionManager1"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource1"/>
        <qualifier value="gx"/>
    </bean>
    <!-- 全注解方式 需加上@Transactional <tx:annotation-driven transaction-manager="transactionManager2"
        /> -->
    <tx:advice id="userTxAdvice1" transaction-manager="transactionManager1">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="del*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="batch*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="bach*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="cancel*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="dis*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="en*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="pc1" expression="execution(public * com.yyyu.crm.biz..*(..))"/>
        <!--把事务控制在Service层 -->
        <aop:advisor pointcut-ref="pc1" advice-ref="userTxAdvice1"/>
    </aop:config>

    <!--###########################################数据源1 ############################-->


    <!--###########################################数据源2###########################-->


    <bean name="dataSource2" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url2}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="5"/>
        <property name="maxActive" value="20"/>
        <!-- <property name="maxIdle" value="20" /> -->
        <property name="minIdle" value="3"/>
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>

    </bean>

    <!-- myBatis文件 -->
    <bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource2"/>
        <!-- 设置MyBatis核心配置文件 -->
        <property name="configLocation" value="classpath:SqlMapConfig.xml" />
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yyyu.crm.yu"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory2"/>
    </bean>

    <!-- 配置事务管理器 gx -->
    <bean id="transactionManager2"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource2"/>
        <qualifier value="gx"/>
    </bean>
    <!-- 全注解方式 需加上@Transactional <tx:annotation-driven transaction-manager="transactionManager2"
        /> -->
    <tx:advice id="userTxAdvice2" transaction-manager="transactionManager2">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="del*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="batch*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="bach*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="cancel*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="dis*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="en*" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="pc2" expression="execution(public * com.yyyu.crm.biz.yu..*(..))"/>
        <!--把事务控制在Service层 -->
        <aop:advisor pointcut-ref="pc2" advice-ref="userTxAdvice2"/>
    </aop:config>

</beans>